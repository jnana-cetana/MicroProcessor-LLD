/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package microprocessor.lld;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import microprocessor.lld.instructions.Instruction;
import microprocessor.lld.instructions.InstructionRegistry;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

        System.out.println(new App().getGreeting());

        if (args.length != 1){
            throw new RuntimeException();
        }
        List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
        run(commandLineArgs);
    }

    public static void run(List<String> commandLineArgs){

        MicroProcessor microProcessor = new MicroProcessor();
        microProcessor.addRegister("A");
        microProcessor.addRegister("B");
        microProcessor.addRegister("C");
        microProcessor.addRegister("D");

        
        String inputFile = commandLineArgs.get(0).split("=")[1];

        try(BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {
            while (true) {
                String line = reader.readLine();
                if (line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(" "));
                switch(tokens.get(0)){
                    case "ADD":
                    {
                        String register = tokens.get(1);
                        Integer value = Integer.parseInt(tokens.get(2));    
                        Instruction instruction = InstructionRegistry.getAddInstruction(register, value, microProcessor);
                        instruction.execute();
                        System.out.println(microProcessor.getRegister(register).getValue());
                    }
                    break;

                    case "ADR":
                    {
                        String register1 = tokens.get(1);
                        String register2 = tokens.get(2);
                        Instruction instruction = InstructionRegistry.getAdrInstruction(register1,register2, microProcessor);
                        instruction.execute();
                    }
                    break;

                    case "DCR":
                    {
                        String register = tokens.get(1);
                        Instruction instruction = InstructionRegistry.getDcrInstruction(register, microProcessor);
                        instruction.execute();
                    }
                    break;

                    case "INR":
                    {
                        String register = tokens.get(1);
                        Instruction instruction = InstructionRegistry.getInrInstruction(register, microProcessor);
                        instruction.execute();
                    }
                    break;

                    case "MOV":
                    {
                        String register1 = tokens.get(1);
                        String register2 = tokens.get(2);
                        Instruction instruction = InstructionRegistry.getMovInstruction(register1,register2, microProcessor);
                        instruction.execute();
                    }
                    break;

                    case "RST":
                    {
                        Instruction instruction = InstructionRegistry.getRstInstruction(microProcessor);
                        instruction.execute();
                    }
                    break;

                    case "SET":
                    {
                        String register = tokens.get(1);
                        Integer value = Integer.parseInt(tokens.get(2)); 
                        Instruction instruction = InstructionRegistry.getSetInstruction(register,value, microProcessor);
                        instruction.execute();
                        System.out.println(microProcessor.getRegister(register).getValue());
                    }
                    break;

                    default:
                        throw new RuntimeException("Invalid Instruction!");
                }
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
